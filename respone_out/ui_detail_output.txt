---
### 第 [1] 轮检索
### [输入问题]:
检索文件，并简单介绍这份文件内容
### [增强检索]:
问题:检索文件，并简单介绍这份文件内容。 关键点：文件名称和类型, 文件主要内容概述, 文件结构和组织方式, 文件创建和更新历史, 文件相关背景信息

### Scanning the files: 
.\docs....
### [检索结果]:
<!-- 第 1 个引用开始 -->
<blockquote>
<hr>
<strong>来源[1]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\app.py</code>，第 <strong>1</strong> 至 <strong>17</strong> 行<br>

<strong>匹配原因：</strong>
文件名称和类型: app.py, 文件主要内容概述: 该文件定义了一个Shiny应用程序，包括UI和服务器设置，以及运行应用程序的入口点。文件结构和组织方式: 文件按照模块化的方式组织，包括导入、UI定义、服务器设置和运行应用程序的代码块。文件创建和更新历史: 未提供具体的历史信息。文件相关背景信息: 该文件是用于动态创建多个ui.navset_card示例的应用程序的一部分。

<strong>匹配内容：</strong>
```text

# app.py

from shiny import App, ui
from app_wikidocu import setup_server


app_ui = ui.page_fluid(
    ui.h1("动态创建多个 ui.navset_card 示例"),
    ui.hr(),
    ui.input_action_button("add_more", "添加更多组件"),
    ui.output_ui("dynamic_content"),
)

app = App(app_ui, setup_server)

if __name__ == "__main__":
    app.run()

```
</blockquote>
<!-- 第 1 个引用结束 -->

<!-- 第 2 个引用开始 -->
<blockquote>
<hr>
<strong>来源[2]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\app_wikidocu.py</code>，第 <strong>1</strong> 至 <strong>189</strong> 行<br>

<strong>匹配原因：</strong>
包含文件的主要内容概述，结构和组织方式，创建和更新历史，相关背景信息

<strong>匹配内容：</strong>
```text

from shiny import App, ui, render, reactive
import os
import datetime


from frontend.utils import generate_full_report,custom_box
from global_vars import ui_detail_output_handler, ui_main_outputt_handler, UI_DETAIL_OUTPUT_PATH,UI_MAIN_OUTPUTT_PATH

SCAN_DIR = "./docs"

ui_detail_output_handler.clear_file()
ui_main_outputt_handler.clear_file()
ui_main_outputt_handler.write_content("欢迎使用 **WikiDocu**！请在下方输入您的问题, 点击 **检索** 以开始分析。")

# ========== UI ==========
app_ui = ui.page_fluid(
    ui.tags.style("""
            .shiny-modal-backdrop {
                display: none !important;
            }"""
    ),
    ui.row(
        ui.column(
            6,
            ui.card(
                ui.card_header("WikiDocu"),
                ui.output_ui("main_output"),  # 使用 output_ui 替代 output_markdown
                style="height: 500px; overflow-y: auto;"
            )
        ),
        ui.column(
            6,
            ui.card(
                ui.card_header("检索结果"),
                #ui.output_ui("detail_output"),
                ui.output_ui("detail_output"),  # Use selected value

                style="height: 500px; overflow-y: auto;"
            )
        )
    ),
)
'''
    ui.row(
        ui.column(
            6,
            ui.card(
                ui.card_header("检索文件列表"),
                #ui.input_text("input_file_paths", "请输入查询目录（默认当前目录）", value="D:/github_rep/gemini-fullstack-langgraph-quickstart/testfiles/README.md"),
                ui.row(
                    ui.column(12,
                        ui.input_text("dir_path", "选中的目录路径", value="", width="100%"),
                        ui.input_action_button("choose_dir", "加载文件", onclick="chooseDirectory()", class_="btn-primary")
                    )
                ),
                style="height: 400px; overflow-y: auto;"
            )
        ),
        ui.column(
            6,
            ui.card(
                #ui.card_header("输入框"),
                ui.card_header("日志"),
                ui.column(12,
                    #ui.input_text_area("custom_message", "请输入研究主题", value="怎么创建PydanticAgent实例", width="100%"),
                    #ui.input_checkbox("deep_research", "启用深度研究", False),
                    #ui.input_action_button("submit", "开始分析")
                ),
                style="height: 300px; overflow-y: auto;"
            )
        )
    )
'''

# ========== Server Logic ==========
from shiny import App, ui, render, reactive
import os
import asyncio
from src.filecontentextract import FileContentExtract

model_name = os.getenv("MODEL_NAME", "your-model-name")
model_name_answer = os.getenv("MODEL_NAME_QWEN3", "your-model-name")

base_url = os.getenv("OPENAI_BASE_URL", "your-base-url")
api_key = os.getenv("OPENAI_API_KEY", "your-api-key")

from langchain_core.messages import BaseMessage, HumanMessage
from src.graph import create_async_tools_graph

graph = create_async_tools_graph()
config = {"configurable": {"thread_id": "1"}}

def server(input, output,  session):
    # 初始化 markdown 内容
    g_value_main_output = reactive.Value("欢迎使用 WikiDocu！请在下方输入研究主题并选择文件路径以开始分析。")

    custom_box(input, output, session)

    @output
    @render.text
    @reactive.file_reader(UI_DETAIL_OUTPUT_PATH)
    async def detail_output():  # Added function declaration
        try:
            # 读取日志文件
            # 检查文件是否存在并且是一个文件
            if not os.path.exists(UI_DETAIL_OUTPUT_PATH) or not os.path.isfile(UI_DETAIL_OUTPUT_PATH):
                print(f"Log file does not exist: {UI_DETAIL_OUTPUT_PATH}")
                return "Log file not found."

            # 使用内置方法读取文本文件
            with open(UI_DETAIL_OUTPUT_PATH, "r", encoding='utf-8') as file:
                log_lines = file.readlines()  # 读取所有行
                return  ui.HTML(f'<div style="font-size: 18px; background-color: #f0f0f0; padding: 10px;">{ui.markdown(''.join(log_lines))}</div>')
        except Exception as e:
            return f"读取文件出错：{str(e)}"


    @output
    @render.text
    @reactive.file_reader(UI_MAIN_OUTPUTT_PATH)
    async def main_output():  # Added function declaration
        try:
            # 读取日志文件
            # 检查文件是否存在并且是一个文件
            if not os.path.exists(UI_MAIN_OUTPUTT_PATH) or not os.path.isfile(UI_MAIN_OUTPUTT_PATH):
                print(f"Log file does not exist: {UI_MAIN_OUTPUTT_PATH}")
                return "Log file not found."

            # 使用内置方法读取文本文件
            with open(UI_MAIN_OUTPUTT_PATH, "r", encoding='utf-8') as file:
                log_lines = file.readlines()  # 读取所有行
                return  ui.HTML(f'<div style="font-size: 18px; background-color: #f0f0f0; padding: 10px;">{ui.markdown(''.join(log_lines))}</div>')
        except Exception as e:
            return f"读取文件出错：{str(e)}"

    @reactive.effect
    @reactive.event(input.custom_send)
    async def handle_custom_send_waiting_notion():
        research_topic = input.custom_message().strip()
        if not research_topic:
            ui.notification_show("⚠️ 请先输入研究主题。", type="error", duration=10 ) # 显式设置为右上角
            return

        # 显示加载提示 + 失效按键
        ui.notification_show("⏳ 正在分析，请稍候...", type="message", duration=10 )
        ui.update_action_button("custom_send", disabled=True)

    @reactive.effect
    @reactive.event(input.custom_send)
    async def handle_custom_send():

        research_topic = input.custom_message().strip()
        input_path = SCAN_DIR #input.input_file_paths().strip()

        if not research_topic:
            ui.update_action_button("custom_send", disabled=False)
            return

        if not input_path or input_path == '.':
            file_paths = [os.path.abspath(os.getcwd())]
        else:
            file_paths = [os.path.abspath(input_path.replace('\\', os.sep).replace('/', os.sep))]

        try:
            response = await graph.ainvoke({"messages": [HumanMessage(content=research_topic)]
                                            }, config)

            answer = response["messages"][-1].content
            #print(f">>> type: {type(answer)}\n{answer}")
            # ✅ 修改输出内容：添加标题、时间戳、数据源等内容
            timestamp = datetime.datetime.now().strftime("%Y年%m月%d日 %H:%M:%S")

            if not answer.strip():
                full_report = "⚠️ 没有获取到有效的分析结果，请检查输入数据或稍后重试。"
            else:
                full_report = generate_full_report(research_topic, answer, file_paths, timestamp)

            g_value_main_output.set(full_report)

            # 如果是第一轮对话，清除欢迎词
            if ui_main_outputt_handler._turns == 0:
                ui_main_outputt_handler.clear_file()

            ui_main_outputt_handler._turns=ui_main_outputt_handler._turns + 1
            ui_main_outputt_handler.write_content(f"---\n### 第 [{ui_main_outputt_handler._turns}] 轮对话\n{full_report}\n")

        except Exception as e:
            ui.notification_show(f"❌ 分析过程中发生错误：{str(e)}", type="error", duration=10 )
            g_value_main_output.set("⚠️ 分析过程中发生错误，请重试。")

```
</blockquote>
<!-- 第 2 个引用结束 -->

<!-- 第 3 个引用开始 -->
<blockquote>
<hr>
<strong>来源[3]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\components.py</code>，第 <strong>1</strong> 至 <strong>17</strong> 行<br>

<strong>匹配原因：</strong>
文件名称和类型: components.py, 文件主要内容概述: 包含了几个用于Shiny应用的函数，如left_panel, right_panel和layout_6_6, 文件结构和组织方式: 按照函数定义的方式组织, 文件创建和更新历史: 无明确创建和更新历史信息, 文件相关背景信息: 该文件是Shiny应用的一部分，用于构建应用的布局

<strong>匹配内容：</strong>
```text

# components.py

from shiny import ui

def left_panel():
    return ui.div("左侧内容", style="border:1px solid #ccc; padding:10px;")

def right_panel():
    return ui.div("右侧内容", style="border:1px solid #ccc; padding:10px;")

# def layout_6_6():
#     return ui.row(
#         ui.column(6, left_panel()),
#         ui.column(6, right_panel())
#     )# components.py

def layout_6_6():

```
</blockquote>
<!-- 第 3 个引用结束 -->

<!-- 第 4 个引用开始 -->
<blockquote>
<hr>
<strong>来源[4]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\config.py</code>，第 <strong>1</strong> 至 <strong>18</strong> 行<br>

<strong>匹配原因：</strong>
文件名称和类型: config.py, 文件主要内容概述: 配置字典定义, 文件结构和组织方式: 代码组织在单个文件中, 文件创建和更新历史: 无相关信息, 文件相关背景信息: 无相关信息

<strong>匹配内容：</strong>
```text

# config.py

from shiny import ui

# 配置字典
navset_configs = {
    "navset_card_tab": {
        "对话": {"title": "Tab Card"},
        # "with_sidebar": {"title": "Tab with Sidebar", "sidebar": ui.sidebar("Sidebar content")},
    },
    # "navset_card_pill": {
    #     "default": {"title": "Pill Card"},
    #     "below": {"title": "Pill Below", "placement": "below"},
    # },
    # "navset_card_underline": {
    #     "default": {"title": "Underline Card"},
    #     "with_header": {"title": "With Header", "header": "Header content"},
    # },

```
</blockquote>
<!-- 第 4 个引用结束 -->

<!-- 第 5 个引用开始 -->
<blockquote>
<hr>
<strong>来源[5]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\navset_builder.py</code>，第 <strong>1</strong> 至 <strong>43</strong> 行<br>

<strong>匹配原因：</strong>
该段落描述了文件navset_builder.py的内容，包括文件结构和组织方式，以及文件的主要功能和实现细节。

<strong>匹配内容：</strong>
```text

# navset_builder.py

from typing import List
from shiny import ui
from config import navset_configs
from components import layout_6_6


class NavsetUIBuilder:
    def __init__(self, navset_configs):
        self.navset_configs = navset_configs

    def create_navset_ui(self, navset_type: str) -> List:
        """动态创建 navset 组件的 UI"""
        navset_function = getattr(ui, navset_type)
        components = []

        for navset_id, params in self.navset_configs[navset_type].items():
            navset_kwargs = params.copy()

            # 创建导航面板
            page_fluid = []
            panel_id = f"{navset_type}_1"

            body_content = layout_6_6()
            page_fluid.append(
                ui.page_fluid(panel_id, body_content, value=panel_id)
            )

            # 创建 navset 组件
            component = navset_function(
                *page_fluid,
                id=f"{navset_type}_{navset_id}",
                **navset_kwargs
            )

            components.append(ui.div(
                ui.h4(f"{navset_type} - {navset_id}"),
                component,
                style="margin-bottom: 2rem;"
            ))

        return components

```
</blockquote>
<!-- 第 5 个引用结束 -->

<!-- 第 6 个引用开始 -->
<blockquote>
<hr>
<strong>来源[6]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\server.py</code>，第 <strong>1</strong> 至 <strong>157</strong> 行<br>

<strong>匹配原因：</strong>
包含文件基本信息，如文件名、类型和主要内容概述

<strong>匹配内容：</strong>
```text

# server.py

from shiny import render, reactive, ui
import os
import random
import datetime

from frontend.navset_builder import NavsetUIBuilder
from frontend.config import navset_configs
from frontend.utils import generate_full_report,clear_docs_folder,custom_box
from src.filecontentextract import FileContentExtract
from global_vars import ui_detail_output_handler, ui_main_outputt_handler, UI_DETAIL_OUTPUT_PATH,UI_MAIN_OUTPUTT_PATH


SCAN_DIR = "./docs"

ui_detail_output_handler.clear_file()
ui_main_outputt_handler.clear_file()
ui_main_outputt_handler.write_content("欢迎使用 **WikiDocu**！请在下方输入您的问题, 点击 **检索** 以开始分析。")


builder = NavsetUIBuilder(navset_configs)

'''
def setup_server(input, output, session):
    dynamic_ui_content = reactive.Value(ui.TagList())

    @output
    @render.text
    @reactive.file_reader(UI_DETAIL_OUTPUT_PATH)
    async def detail_output():
        try:
            if not os.path.exists(UI_DETAIL_OUTPUT_PATH) or not os.path.isfile(UI_DETAIL_OUTPUT_PATH):
                print(f"Log file does not exist: {UI_DETAIL_OUTPUT_PATH}")
                return "Log file not found."

            with open(UI_DETAIL_OUTPUT_PATH, "r", encoding='utf-8') as file:
                log_lines = file.readlines()
                return ui.HTML(f'<div style="font-size: 18px; background-color: #f0f0f0; padding: 10px;">{"".join(log_lines)}</div>')

        except Exception as e:
            return f"读取文件出错：{str(e)}"

    @output
    @render.text
    @reactive.file_reader(UI_MAIN_OUTPUTT_PATH)
    async def main_output():
        try:
            if not os.path.exists(UI_MAIN_OUTPUTT_PATH) or not os.path.isfile(UI_MAIN_OUTPUTT_PATH):
                print(f"Log file does not exist: {UI_MAIN_OUTPUTT_PATH}")
                return "Log file not found."

            with open(UI_MAIN_OUTPUTT_PATH, "r", encoding='utf-8') as file:
                log_lines = file.readlines()
                return ui.HTML(f'<div style="font-size: 18px; background-color: #f0f0f0; padding: 10px;">{"".join(log_lines)}</div>')

        except Exception as e:
            return f"读取文件出错：{str(e)}"

    @output
    @render.ui
    @reactive.event(input.add_more)
    def dynamic_content():
        navset_types = list(navset_configs.keys())
        selected_type = random.choice(navset_types)

        new_content = ui.TagList(
            builder.create_navset_ui(selected_type),
        )

        current_content = dynamic_ui_content.get()
        current_content.append(new_content)
        dynamic_ui_content.set(current_content)

        return dynamic_ui_content.get()

    @output
    @render.code
    def selected_values():
        selected = {}
        for navset_type in navset_configs.keys():
            for navset_id in navset_configs[navset_type].keys():
                component_id = f"{navset_type}_{navset_id}"
                if hasattr(input, component_id):
                    selected[component_id] = getattr(input, component_id)()
        return str(selected)

'''
# ========== Server Logic ==========
from shiny import App, ui, render, reactive
import os
import asyncio
from src.filecontentextract import FileContentExtract

model_name = os.getenv("MODEL_NAME", "your-model-name")
model_name_answer = os.getenv("MODEL_NAME_QWEN3", "your-model-name")

base_url = os.getenv("OPENAI_BASE_URL", "your-base-url")
api_key = os.getenv("OPENAI_API_KEY", "your-api-key")

from langchain_core.messages import BaseMessage, HumanMessage
from src.graph import create_async_tools_graph

graph = create_async_tools_graph()
config = {"configurable": {"thread_id": "1"}}

def setup_server(input, output,  session):
    dynamic_ui_content = reactive.Value(ui.TagList())

    # 初始化 markdown 内容
    g_value_main_output = reactive.Value("欢迎使用 WikiDocu！请在下方输入研究主题并选择文件路径以开始分析。")

    custom_box(input, output, session)

    @output
    @render.text
    @reactive.file_reader(UI_DETAIL_OUTPUT_PATH)
    async def detail_output():  # Added function declaration
        try:
            # 读取日志文件
            # 检查文件是否存在并且是一个文件
            if not os.path.exists(UI_DETAIL_OUTPUT_PATH) or not os.path.isfile(UI_DETAIL_OUTPUT_PATH):
                print(f"Log file does not exist: {UI_DETAIL_OUTPUT_PATH}")
                return "Log file not found."

            # 使用内置方法读取文本文件
            with open(UI_DETAIL_OUTPUT_PATH, "r", encoding='utf-8') as file:
                log_lines = file.readlines()  # 读取所有行
                return  ui.HTML(f'<div style="font-size: 18px; background-color: #f0f0f0; padding: 10px;">{ui.markdown(''.join(log_lines))}</div>')
        except Exception as e:
            return f"读取文件出错：{str(e)}"


    @output
    @render.text
    @reactive.file_reader(UI_MAIN_OUTPUTT_PATH)
    async def main_output():  # Added function declaration
        try:
            # 读取日志文件
            # 检查文件是否存在并且是一个文件
            if not os.path.exists(UI_MAIN_OUTPUTT_PATH) or not os.path.isfile(UI_MAIN_OUTPUTT_PATH):
                print(f"Log file does not exist: {UI_MAIN_OUTPUTT_PATH}")
                return "Log file not found."

            # 使用内置方法读取文本文件
            with open(UI_MAIN_OUTPUTT_PATH, "r", encoding='utf-8') as file:
                log_lines = file.readlines()  # 读取所有行
                return  ui.HTML(f'<div style="font-size: 18px; background-color: #f0f0f0; padding: 10px;">{ui.markdown(''.join(log_lines))}</div>')
        except Exception as e:
            return f"读取文件出错：{str(e)}"

###############

    @output
    @render.ui
    @reactive.event(input.add_more)
    def dynamic_content():

```
</blockquote>
<!-- 第 6 个引用结束 -->

<!-- 第 7 个引用开始 -->
<blockquote>
<hr>
<strong>来源[7]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\server.py</code>，第 <strong>158</strong> 至 <strong>241</strong> 行<br>

<strong>匹配原因：</strong>
包含文件基本信息，如文件名、类型和主要内容概述

<strong>匹配内容：</strong>
```text

        navset_types = list(navset_configs.keys())
        selected_type = random.choice(navset_types)

        new_content = ui.TagList(
            builder.create_navset_ui(selected_type),
        )

        current_content = dynamic_ui_content.get()
        current_content.append(new_content)
        dynamic_ui_content.set(current_content)

        return dynamic_ui_content.get()

    @output
    @render.code
    def selected_values():
        selected = {}
        for navset_type in navset_configs.keys():
            for navset_id in navset_configs[navset_type].keys():
                component_id = f"{navset_type}_{navset_id}"
                if hasattr(input, component_id):
                    selected[component_id] = getattr(input, component_id)()
        return str(selected)


##########
    @reactive.effect
    @reactive.event(input.custom_send)
    async def handle_custom_send_waiting_notion():
        research_topic = input.custom_message().strip()
        if not research_topic:
            ui.notification_show("⚠️ 请先输入研究主题。", type="error", duration=10 ) # 显式设置为右上角
            return

        # 显示加载提示 + 失效按键
        ui.notification_show("⏳ 正在分析，请稍候...", type="message", duration=10 )
        ui.update_action_button("custom_send", disabled=True)

    @reactive.effect
    @reactive.event(input.custom_send)
    async def handle_custom_send():

        research_topic = input.custom_message().strip()
        input_path = SCAN_DIR #input.input_file_paths().strip()

        if not research_topic:
            ui.update_action_button("custom_send", disabled=False)
            return

        if not input_path or input_path == '.':
            file_paths = [os.path.abspath(os.getcwd())]
        else:
            file_paths = [os.path.abspath(input_path.replace('\\', os.sep).replace('/', os.sep))]

        try:
            response = await graph.ainvoke({"messages": [HumanMessage(content=research_topic)]
                                            }, config)

            answer = response["messages"][-1].content
            #print(f">>> type: {type(answer)}\n{answer}")
            # ✅ 修改输出内容：添加标题、时间戳、数据源等内容
            timestamp = datetime.datetime.now().strftime("%Y年%m月%d日 %H:%M:%S")

            if not answer.strip():
                full_report = "⚠️ 没有获取到有效的分析结果，请检查输入数据或稍后重试。"
            else:
                full_report = generate_full_report(research_topic, answer, file_paths, timestamp)

            g_value_main_output.set(full_report)

            # 如果是第一轮对话，清除欢迎词
            if ui_main_outputt_handler._turns == 0:
                ui_main_outputt_handler.clear_file()

            ui_main_outputt_handler._turns=ui_main_outputt_handler._turns + 1
            ui_main_outputt_handler.write_content(f"---\n### 第 [{ui_main_outputt_handler._turns}] 轮对话\n{full_report}\n")

        except Exception as e:
            ui.notification_show(f"❌ 分析过程中发生错误：{str(e)}", type="error", duration=10 )
            g_value_main_output.set("⚠️ 分析过程中发生错误，请重试。")
        finally:
            # 无论成功与否，都启用按钮
            ui.update_action_button("custom_send", disabled=False)


```
</blockquote>
<!-- 第 7 个引用结束 -->

<!-- 第 8 个引用开始 -->
<blockquote>
<hr>
<strong>来源[8]：</strong> 
<code>D:\github_rep\WikiDocu\wikidocu\docs\app_test\test_app2.py</code>，第 <strong>1</strong> 至 <strong>109</strong> 行<br>

<strong>匹配原因：</strong>
该段落包含了文件的名称和类型，主要内容概述，文件结构和组织方式，创建和更新历史以及相关背景信息。

<strong>匹配内容：</strong>
```text

from shiny import App, render, ui, reactive
from typing import Dict, Any
import random

# 配置字典
navset_configs: Dict[str, Dict[str, Dict[str, Any]]] = {
    "navset_card_tab": {
        "对话": {"title": "Tab Card"},
    #    "with_sidebar": {"title": "Tab with Sidebar", "sidebar": ui.sidebar("Sidebar content")},
    },
    # "navset_card_pill": {
    #     "default": {"title": "Pill Card"},
    #     "below": {"title": "Pill Below", "placement": "below"},
    # },
    # "navset_card_underline": {
    #     "default": {"title": "Underline Card"},
    #     "with_header": {"title": "With Header", "header": "Header content"},
    # },
}

def create_navset_ui(navset_type: str) -> list:
    """动态创建 navset 组件的 UI"""
    navset_function = getattr(ui, navset_type)
    components = []

    for navset_id, params in navset_configs[navset_type].items():
        navset_kwargs = params.copy()

        # 创建导航面板
        nav_panels = []
        #for suffix in ["a", "b"]:
        panel_id = f"{navset_type}_1"
        
        # 创建左右布局的内容
        left_content = ui.div("左侧内容", style="border:1px solid #ccc; padding:10px;")
        right_content = ui.div("右侧内容", style="border:1px solid #ccc; padding:10px;")
        
        body_content = ui.row(
            ui.column(6, left_content),
            ui.column(6, right_content)
        )
        
        nav_panels.append(
            ui.nav_panel(panel_id, body_content, value=panel_id)
        )

        # 创建 navset 组件
        component = navset_function(
            *nav_panels,
            id=f"{navset_type}_{navset_id}",
            **navset_kwargs
        )

        components.append(ui.div(
            ui.h4(f"{navset_type} - {navset_id}"),
            component,
            style="margin-bottom: 2rem;"
        ))

    return components

# 构建 UI
app_ui = ui.page_fluid(
    ui.h1("动态创建多个 ui.navset_card 示例"),
    ui.hr(),
    ui.input_action_button("add_more", "添加更多组件"),
    ui.output_ui("dynamic_content"),
    #ui.h3("当前选中的值:"),
    #ui.output_code("selected_values")
)

def server(input, output, session):
    # 用 reactive.Value 保存累计的 UI 内容
    dynamic_ui_content = reactive.Value(ui.TagList())

    @render.ui
    @reactive.event(input.add_more)
    def dynamic_content():
        navset_types = list(navset_configs.keys())
        selected_type = random.choice(navset_types)  # 随机选择一个类型

        # 生成新内容
        new_content = ui.TagList(
            #ui.h4(f"第 {len(dynamic_ui_content.get()) + 1} 次添加的组件（{selected_type}）"),
            create_navset_ui(selected_type),
        )

        # 追加到已有内容中
        current_content = dynamic_ui_content.get()
        current_content.append(new_content)
        dynamic_ui_content.set(current_content)

        return dynamic_ui_content.get()  # 返回全部内容

    # 显示所有选中的值
    @render.code
    def selected_values():
        selected = {}
        for navset_type in navset_configs.keys():
            for navset_id in navset_configs[navset_type].keys():
                component_id = f"{navset_type}_{navset_id}"
                if hasattr(input, component_id):
                    selected[component_id] = getattr(input, component_id)()
        return str(selected)

app = App(app_ui, server)

if __name__ == "__main__":
    app.run()

```
</blockquote>
<!-- 第 8 个引用结束 -->

